#!/usr/bin/perl -w

#####################################################
### Perl Script for SAS style Indentation         ###
###                                               ###
### Usage:                                        ###
### 1) indsas your_sas_script.sas                 ###
###                                               ###
###    OR                                         ###
###                                               ###
### 2) Put the following line in .vimrc and you   ###
###    can use gg=G to indent code in VIM.        ###
###    set ep=your_path_to_indsas/indsas          ###
###                                               ###
### Created by David Yeung (dyeung008@gmail.com)  ###
###                                               ###
### Updates:                                      ###
###  07/03/2011                                   ###
###  05/20/2012 : can work on file, doesn't need  ###
###               pipe.                           ###
###  12/01/2013 : can handle datalines.           ###
#####################################################

$0=~/.*\/(.*)/;

my $numtab = 0;
my @status = ("root");


for (<>)
{
        chomp $_;

        #strip preceding spaces;
        $_=~s/^\s+//g;
        $_=~s/^\t+//g;


        #pull current status;
        my $curr_status = $status[-1];


        #check if indent is ending
        if (  ($_=~/^run;/i && not($_=~/proc\s+/i) && not($_=~/data\s+/i)) ||
                  $_=~/^\%mend.*;/i ||
                  ($_=~/^%*end;/i) ||
                  ($_=~/^quit;/i  ) ||
                  ($_=~/;/ && $curr_status eq "input_put" ) ||
                  ($_=~/;/ && $curr_status eq "merge")
           )
        {
                if ($curr_status ne "root")
                {
                        $numtab+=-1;
                        pop @status;
                }
        }


        #the indents.
        my $header = "    "x$numtab;


        #print current line with indents except for datalines.
    if ($_=~/datalines;/) {
        print $_."\n";
    }
    else {
        print $header.$_."\n";
    }


        #get indent status for next;
        my $next_status = "nodo";

        if ( $_=~/^proc\s+/i && not($_=~/\Wrun;/i) && not($_=~/\s+sql\s*;/i))
        {       $next_status = "proc";
        }
        elsif ($_=~/^data\s+/i && not($_=~/run;/i))
        {
                $next_status = "data";
        }
        elsif ($_=~/^\%macro\s+/i && not($_=~/\%mend;/))
        {
                $next_status = "macro";
        }
        elsif ($_=~/^proc sql/i && not($_=~/quit;/))
        {
                $next_status = "sql";
        }
        elsif ($_=~/%*then %*do;/i)
        {
                $next_status = "if";
        }
        elsif ($_=~/^%*else %*do/ )
        {
                $next_status = "else";
        }
        elsif ( ($_=~/^(in)*put(\s|$)/i || $_=~/^keep(\s|$)/i) && not($_=~/;/))
        {       $next_status = "input_put";
        }
        elsif ($_=~/^%*do\s+/i )
        {       $next_status = "do";
        }
        elsif ($_=~/merge(\s|$)/i && not($_=~/;/) && $status[$#status] eq "data")
        {       $next_status = "merge";
        }


        #push next indent status to queue and adjust numtab
        if ($next_status ne "nodo" )
        {
                push @status,$next_status;
                $numtab+=1;
        }
}


